module Local

using HTTP, JSON
using ..Config
using ..Validator
using ..Debug

const DEFAULT_LLM_URL = "http://localhost:11434/api/generate"
const DEFAULT_MODEL = "qwen2.5-coder"

"""
    process_statement_local(statement::String; kwargs...)

Process a mathematical statement using a local LLM server.
Keyword arguments:
- llm_url: URL of the LLM server (default: DEFAULT_LLM_URL)
- model: Model name to use (default: DEFAULT_MODEL)
"""
function process_statement_local(statement::String; 
    llm_url::String=DEFAULT_LLM_URL, 
    model::String=DEFAULT_MODEL
)
    debug_print("=== Debugging Local Backend ===")
    debug_print("Input statement: $statement")
    debug_print("Provided llm_url: $llm_url")
    debug_print("Provided model: $model")
    
    # Check if dictionary mode is enabled
    if Config.CONFIG.dictionary_mode == :enabled
        # Try to find a match in SEED_DICTIONARY
        for entry in Config.SEED_DICTIONARY
            if entry["input"] == statement
                debug_print("Found exact match in seed dictionary")
                return entry["output"]
            end
        end
    end
    
    debug_print("No dictionary match found, proceeding with API call")
    
    # Prepare the prompt
    # prompt = "Translate the following mathematical statement into Oscar code:\n\n"
    prompt = "You are an expert Oscar programmer. Generate ONLY the Oscar code for the following mathematical statement. 
Use ONLY Oscar syntax and functions. Do not include any explanations, examples, or additional text. 
Do not return code as a string literal - output the code directly without quotes. 
Do NOT use any markdown formatting, backticks (`), or language indicators. 
Just output the raw code, as in the example below:

Example: For \"Primary decomposition of the ideal generated by x^2 - y^2 in the polynomial ring over rationals\", output:
R, (x,y) = polynomial_ring(QQ, [\"x\", \"y\"]);\nI = ideal(R, [x^2-y^2]);\nprimary_decomposition(I)

\n\n"
    
    if !Config.CONFIG.training_mode
        # prompt *= "Context:\n"
        for (original, generated) in Config.CONFIG.context.history
            prompt *= "Mathematical statement: $original\nOscar code: $generated\n\n"
        end
        prompt *= "\n"
    end
    prompt *= "Mathematical statement: $statement\nOscar code:\n\n"
    
    debug_print("Final prompt:\n$prompt")
    
    try
        # Make the API request
        response = HTTP.post(llm_url, [
            "Content-Type" => "application/json"
        ], JSON.json(Dict(
            "model" => model,
            "prompt" => prompt,
            "stream" => false
        ))).body
        
        # Parse the response
        result = JSON.parse(String(response))
        debug_print("API response: $result")
        
        # Extract the generated code
        generated_code = get(result, "response", "")
        debug_print("Generated Oscar code:\n$generated_code")
        
        # Validate the generated code
        if Validator.validate_oscar_code(generated_code)
            return generated_code
        else
            error("Invalid Oscar code generated")
        end
    catch e
        debug_print("Error in process_statement_local: $e")
        rethrow()
    end
end

export process_statement_local

end # module Local
